services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka-broker:
    image: confluentinc/cp-kafka:6.1.1
    hostname: kafka-broker
    container_name: kafka-broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    healthcheck:
      test: "/usr/bin/kafka-topics --list --zookeeper zookeeper:2181"

  kafka-topic-creator:
    image: confluentinc/cp-kafka:6.1.1
    container_name: kafka-topic-creator
    depends_on:
      kafka-broker:
        condition: service_healthy
    command: "bash -c 'echo creating topics && \
          kafka-topics --bootstrap-server kafka-broker:9092 --create --topic tweets && \
          kafka-topics --bootstrap-server kafka-broker:9092 --create --topic tweets-wordcount'"

  mysql:
    image: mysql:latest
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: "${SPRING_DATASOURCE_PASSWORD}"
      MYSQL_DATABASE: "hashtag_tracker"
    ports:
      - "3307:3307"
    restart: always
    volumes:
      - ./database:/tmp/database
    command: mysqld --init-file="/tmp/database/initial.sql"


  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.0
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - cluster.initial_master_nodes=es01
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200

  tweet-producer:
    build: ./tweet-producer
    container_name: tweet-producer
    depends_on:
      - kafka-topic-creator
      - kafka-broker
    environment:
      BEARER_TOKEN: "${BEARER_TOKEN}"

  spring-boot-consumer:
    build: ./spring-boot-consumer
    container_name: spring-boot-consumer
    depends_on:
      - tweet-producer
      - mysql
      - kafka-broker
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: "${SPRING_DATASOURCE_URL}"
      SPRING_DATASOURCE_USERNAME: "${SPRING_DATASOURCE_USERNAME}"
      SPRING_DATASOURCE_PASSWORD: "${SPRING_DATASOURCE_PASSWORD}"

  kafka-streams-tweet-word-count:
    build: ./kafka-streams-tweet-word-count
    container_name: kafka-streams-tweet-word-count
    depends_on:
      - tweet-producer
      - kafka-broker

  nodejs-consumer-elasticsearch:
    build: ./nodejs-consumer-elasticsearch
    container_name: nodejs-consumer-elasticsearch
    depends_on:
      - tweet-producer
      - es01
      - kafka-broker

  python-consumer-logger:
    build: ./python-consumer-logger
    container_name: python-consumer-logger
    depends_on:
      - kafka-topic-creator
      - kafka-broker

  python-consumer-top-words:
    build: ./python-consumer-top-words
    container_name: python-consumer-top-words
    depends_on:
      - kafka-streams-tweet-word-count
      - kafka-broker
    volumes:
      - ./output:/app/output